// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Management
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  phone             String?  @unique
  username          String?  @unique
  firstName         String?
  lastName          String?
  displayName       String?
  avatar            String?
  dateOfBirth       DateTime?
  gender            Gender?
  location          String?
  timezone          String?
  language          String   @default("en")
  culturalContext   String?
  isAnonymous       Boolean  @default(false)
  isVerified        Boolean  @default(false)
  isActive          Boolean  @default(true)
  lastSeen          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  profile           UserProfile?
  preferences       UserPreferences?
  sessions          Session[]
  moodEntries       MoodEntry[]
  goals             Goal[]
  journalEntries    JournalEntry[]
  assessments       Assessment[]
  forumPosts        ForumPost[]
  forumComments     ForumComment[]
  forumLikes        ForumLike[]
  forumCommentLikes ForumCommentLike[]
  supportGroups     SupportGroupMember[]
  consultations     Consultation[]
  notifications     Notification[]
  emergencyContacts EmergencyContact[]
  culturalPractices CulturalPractice[]
  digitalLiteracy   DigitalLiteracyProgress[]
  privacySettings   PrivacySettings?

  @@map("users")
}

model UserProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  bio                   String?
  occupation            String?
  education             String?
  familyStatus          String?
  culturalBackground    String?
  spiritualBeliefs      String?
  traditionalPractices  String?
  emergencyContact      String?
  emergencyPhone        String?
  emergencyRelationship String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  theme                 String   @default("light")
  notifications         Boolean  @default(true)
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  smsNotifications      Boolean  @default(false)
  language              String   @default("en")
  culturalContext       String?
  accessibilityMode     Boolean  @default(false)
  highContrastMode      Boolean  @default(false)
  largeTextMode         Boolean  @default(false)
  voiceNavigation       Boolean  @default(false)
  offlineMode           Boolean  @default(true)
  dataSharing           Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Mental Health Tracking
model MoodEntry {
  id          String   @id @default(cuid())
  userId      String
  mood        Int      // 1-10 scale
  energy      Int?     // 1-10 scale
  anxiety     Int?     // 1-10 scale
  stress      Int?     // 1-10 scale
  sleep       Int?     // 1-10 scale
  notes       String?
  activities  Json?    // Array of activities as JSON
  triggers    Json?    // Array of triggers as JSON
  location    String?
  weather     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mood_entries")
}

model Goal {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  category    GoalCategory
  target      String?
  progress    Int         @default(0) // 0-100
  status      GoalStatus  @default(ACTIVE)
  startDate   DateTime    @default(now())
  targetDate  DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  content   String
  mood      Int?     // 1-10 scale
  tags      Json?    // Array of tags as JSON
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

// Mental Health Assessments
model Assessment {
  id          String           @id @default(cuid())
  userId      String
  type        AssessmentType
  title       String
  description String?
  questions   Json             // Array of questions
  responses   Json             // Array of responses
  score       Int?
  result      AssessmentResult?
  recommendations String?
  isCompleted Boolean          @default(false)
  completedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

// Community Features
model ForumPost {
  id          String      @id @default(cuid())
  userId      String
  categoryId  String
  title       String
  content     String
  tags        Json?       // Array of tags as JSON
  isAnonymous Boolean     @default(false)
  isPinned    Boolean     @default(false)
  isLocked    Boolean     @default(false)
  viewCount   Int         @default(0)
  likeCount   Int         @default(0)
  commentCount Int        @default(0)
  status      PostStatus  @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    ForumCategory @relation(fields: [categoryId], references: [id])
  comments    ForumComment[]
  likes       ForumLike[]

  @@map("forum_posts")
}

model ForumCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts ForumPost[]

  @@map("forum_categories")
}

model ForumComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  isAnonymous Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     ForumCommentLike[]

  @@map("forum_comments")
}

model ForumLike {
  id     String @id @default(cuid())
  postId String
  userId String

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("forum_likes")
}

model ForumCommentLike {
  id        String @id @default(cuid())
  commentId String
  userId    String

  comment ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("forum_comment_likes")
}

model SupportGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  language    String
  culturalContext String?
  maxMembers  Int?
  isPrivate   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     SupportGroupMember[]
  sessions    SupportGroupSession[]

  @@map("support_groups")
}

model SupportGroupMember {
  id      String     @id @default(cuid())
  groupId String
  userId  String
  role    MemberRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  group SupportGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("support_group_members")
}

model SupportGroupSession {
  id          String   @id @default(cuid())
  groupId     String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group SupportGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("support_group_sessions")
}

model Consultation {
  id          String             @id @default(cuid())
  userId      String
  providerId  String?
  healerId    String?
  type        ConsultationType
  status      ConsultationStatus @default(SCHEDULED)
  scheduledAt DateTime
  duration    Int                // in minutes
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider Provider? @relation(fields: [providerId], references: [id])
  healer   TraditionalHealer? @relation(fields: [healerId], references: [id])

  @@map("consultations")
}

model Provider {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phone           String?
  specialization  String
  languages       Json?    // Array of languages as JSON
  culturalContext String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  consultations Consultation[]

  @@map("providers")
}

model TraditionalHealer {
  id                String   @id @default(cuid())
  name              String
  specialization    String
  experience        String
  location          String
  languages         Json?    // Array of languages as JSON
  culturalBackground String
  rating            Float?
  availability      String?
  consultationType  String?
  focusAreas        Json?    // Array of focus areas as JSON
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  consultations Consultation[]

  @@map("traditional_healers")
}

model CommunityResource {
  id              String       @id @default(cuid())
  title           String
  description     String?
  type            ResourceType
  url             String?
  contactInfo     Json?
  languages       Json?        // Array of languages as JSON
  culturalContext String?
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("community_resources")
}

model CulturalPractice {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  culturalContext String?
  duration    Int?     // in minutes
  frequency   String?
  benefits    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cultural_practices")
}

model Content {
  id              String            @id @default(cuid())
  title           String
  description     String?
  type            ContentType
  content         String
  culturalContext String?
  tags            Json?             // Array of tags as JSON
  difficulty      ContentDifficulty @default(BEGINNER)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("content")
}

model DigitalLiteracyProgress {
  id          String   @id @default(cuid())
  userId      String
  moduleId    String
  progress    Int      @default(0) // 0-100
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("digital_literacy_progress")
}

model PrivacySettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  profileVisibility     Visibility @default(PRIVATE)
  dataSharing           Boolean  @default(false)
  analyticsTracking     Boolean  @default(false)
  emergencyContactSharing Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("privacy_settings")
}

model EmergencyContact {
  id          String   @id @default(cuid())
  userId      String
  name        String
  phone       String
  relationship String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum GoalCategory {
  MENTAL_HEALTH
  PHYSICAL_HEALTH
  SOCIAL_CONNECTIONS
  CAREER
  EDUCATION
  SPIRITUALITY
  CULTURAL_PRACTICES
  OTHER
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum AssessmentType {
  ANXIETY
  DEPRESSION
  STRESS
  SLEEP
  CULTURAL_WELLNESS
  DIGITAL_LITERACY
  CUSTOM
}

enum AssessmentResult {
  LOW
  MODERATE
  HIGH
  SEVERE
}

enum PostStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum ConsultationType {
  VIDEO
  AUDIO
  TEXT
  IN_PERSON
}

enum ConsultationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ResourceType {
  SUPPORT_GROUP
  HELPLINE
  EMERGENCY
  EDUCATION
  CULTURAL
  DIGITAL_LITERACY
}

enum ContentType {
  ARTICLE
  VIDEO
  AUDIO
  INTERACTIVE
  ASSESSMENT
  WORKSHOP
}

enum ContentDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  MOOD_REMINDER
  GOAL_UPDATE
  COMMUNITY_UPDATE
  CONSULTATION_REMINDER
  CULTURAL_EVENT
  SYSTEM_UPDATE
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
} 